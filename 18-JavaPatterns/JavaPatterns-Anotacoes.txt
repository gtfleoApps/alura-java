-> SOLID:
- xxx
- Sempre que uma nova funcionalidade for implementada, o ideal é que possamos criar código novo e editar o mínimo possível de código já existente. Este é um dos principais pontos do princípio Aberto-Fechado (Open-Closed Principle) do SOLID. Ao editar código existente, podemos acabar quebrando funcionalidades já implementadas e funcionais.

-> Site com resumo dos padroes GoF: 
https://refactoring.guru/design-patterns

-> Geral:
- Padrões de projeto são soluções genéricas para problemas recorrentes do desenvolvimento de software orientado a objetos;
- Existem três principais categorias de padrões de projeto:
    Comportamentais
    Estruturais
    Criacionais

-> PADROES COMPORTAMENTAIS:
+ Strategy:
- Que tipo de problema o padrão Strategy visa resolver?
Pode ser utilizado quando há diversos possíveis algoritmos para uma ação (como calcular imposto, por exemplo). Nele, nós separamos cada um dos possíveis algoritmos em classes separadas.
- Padrão de projeto utilizada para diminuir a complexidade do nosso código, trocando múltiplas condicionais por classes.


+ Chain of Responsibility:
- Permite criar uma cadeia de possíveis algoritmos (diferente do strategy, onde já se conhece o algoritmo a processar).
- Ex: 
Ao se aplicar um imposto, já se sabe qual é o cálculo. Então, usa-se strategy.
Ao se aplicar um desconto, depende-se de quantidade ou valor e é necessário passar em vários cálculos. Então, usa-se Chain of Responsability.

+ Template Method:
- Favorece o reaproveitamento de códigos comuns entre classes, evitando assim duplicações de códigos.
- Aplicamos o pattern Template Method com a criação de um método concreto na classe “mãe”, que chama métodos abstratos implementados nas classes “filhas”.
- Vimos que é possível aplicar mais de um padrão no mesmo código.

+ State:
- É possível que um objeto se comporte de formas diferentes, dependendo do seu estado. Então, se o resultado de uma chamada de método depende do estado, podemos delegar esta ação para uma classe específica do estado atual. Essa técnica é o State pattern.
- O padrão State, assim como o padrão Strategy, resolve o problema de muitos ifs no código.

+ Command:
- Um caso de uso em nossa aplicação pode ter várias ações (salvar no banco, enviar e-mail, etc);
- Um caso de uso deve ser extraído para uma classe específica, ao invés de estar no arquivo da CLI, controller ou algo do tipo;
- Command é a técnica de extração do caso de uso para uma classe específica.

+ Command Handler:
- Variação do Command, muito utilizado no padrão de arquitetura Domain Driven Design.
- Separa em 2 classes: uma para representar os Dados ou informações necessárias ao comando; e outra para executar o comando, com injeção das dependências necessárias.
- Um Command Handler tem como responsabilidade, normalmente, apenas orquestrar as tarefas a serem executadas, ou seja, chamar as classes necessárias que realizam as tarefas desejadas.

+ Observer:
- Uma classe observer/listener fica observando um evento disparado em outra classe.
- Essa última, possui uma lista de acoes (de uma interface), recebida em seu construtor, não sendo mais necessario realizar implementacoes/alteracoes nesse codigo, quando houver inclusao ou exclusao de acoes (de classes observer).
- O modulo executor, instancia o objeto (um handler de execucao) e passa, em seu construtor, as classes observer como uma lista.

-> PADROES ESTRUTURAIS:
+ Adapter:
- Devemos sempre preferir depender de abstrações, ou seja, interfaces ou classes abstratas, sempre que possível, ao invés de implementações específicas. Inclusive, esse é um dos princípio de SOLID (Dependency Inversion Principle, a letra D). 
- Quando precisamos utilizar código legado ou código de componentes externos em nosso sistema, é muito comum não ter a interface (métodos públicos) batendo com o que a gente precisa, então nesses casos nós criamos adapters. Esse padrão é muito simples e muito utilizado no dia a dia do desenvolvimento.
- Padrões estruturais nos ajudam a relacionar diversas classes de forma organizada.
- Detalhes de infraestrutura devem ser abstraídos através de interfaces.
- O padrão Adapter pode nos ajudar a trocar detalhes de infraestrutura, sem muitas dores de cabeça.

+ Decorator:
- O padrão Decorator permite adicionar novos comportamentos a um objeto, em tempo de execução, tornando o código bastante flexível e dinâmico.
- O Decorator precisar possuir a mesma interface do objeto que ele está decorando.

+ Composite:
- Parecido com o Decorator, com a diferença de compor objetos como sendo uma estrutura em árvore, hierárquica.

+ Facade:
- É a exposição de parte das funcionalidades de um sub-sistema através de uma classe. Esta, responsável por ser essa fachada, implementa o padrão Facade.
- Em determinados casos, nós podemos precisar de um acesso simplificado a uma parte complexa ou grande do nosso sistema, como autenticação, acesso a sistema de arquivos, cache, etc. Uma classe de fachada, contendo apenas a funcionalidade desejada, pode ser bastante útil.

+ Proxy:
- Quando se intercepta uma requisição, para realizar algum tratamento.
- Podemos utilizar o padrão Proxy para interceptar classes e executar regras de segurança. Outro bom motivo é performance.













